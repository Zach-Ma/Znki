generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// basic unit for memorizing
model Card {
  id        Int        @id @default(autoincrement())
  deckId           Int        @map("did")
  templateId       Int        @default(-1) @map("tid")
  title     String
  status    CardStatusEnum @default(NEW)
  due       DateTime?
  reviews   Int        @default(0)
  createAt  DateTime   @default(now()) @map(name:"create_at")
  updateAt  DateTime   @default(now()) @map(name:"update_at")
  notes     Note[]

  @@map(name:"cards")
}

model Deck {
  id          Int       @id @default(autoincrement())
  version     Int       @default(0)
  pid         Int       @default(-1) // only child deck can have cards
  conf        String?
  createAt    DateTime  @default(now()) @map(name:"create_at")
  updateAt    DateTime  @default(now()) @map(name:"update_at")
  userId      Int       @map(name:"user_id")
  isPublic    Boolean   @default(false) @map(name:"is_pubic")
  name        String
  description String?

  @@map(name:"decks")
}

model Note {
  id        Int      @id @default(autoincrement())
  templateId       Int        @default(-1) @map("tid")
  content   String
  cardId       Int      @map("cid")
  createAt  DateTime @default(now()) @map(name:"create_at")
  updateAt  DateTime @default(now()) @map(name:"update_at")
  type      NoteTypeEnum      @default(TEXT)
  card      Card     @relation(fields: [cardId], references: [id])

  @@map(name:"notes")
}

// model tag_card {
//   id        Int      @id @default(autoincrement())
//   tid       Int
//   cid       Int
//   createAt DateTime @default(now())
//   updateAt DateTime @default(now())
// }

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  type      Int      @default(0)
  createAt  DateTime @default(now()) @map(name:"create_at")
  updateAt  DateTime @default(now()) @map(name:"update_at")

  @@map(name:"tags")
}

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique/// uuid for user
  createAt  DateTime @default(now()) @map(name:"create_at")
  updateAt  DateTime @default(now()) @map(name:"update_at")
  username  String
  pwd       String
  avatar    String?
  email     String   @unique
  phone     String?
  storage   Storage[]

  @@map(name:"users")
}

model Storage {
  id  Int @id @default(autoincrement())
  url String 
  key String  @default("")  /// key to specifiy object
  mimeType String @default("") @map(name:"mime_type")
  userId Int @map(name:"user_id")
  user User @relation(fields: [userId],references:[id])
  createAt  DateTime @default(now()) @map(name:"create_at")
  updateAt  DateTime @default(now()) @map(name:"update_at")

  @@map(name:"storages")
}

enum NoteTypeEnum {
  TEXT
  IMAGE
}

enum CardStatusEnum {
  NEW
  LEARNING
  REVIEW
  RELEARNING
}